Documentação: Criação de Projeto com Next.js e Prisma

Esta documentação reúne os passos para criar um projeto fullstack utilizando Next.js e Prisma, além de integrar ferramentas de formatação, ESLint e componentes UI (shadcn). Cada seção traz uma breve explicação para facilitar o entendimento.

1. Criando o Projeto com Next.js

1.1. Introdução ao Next.js

O que é? Next.js é um framework fullstack baseado em React que permite renderização do lado do servidor (SSR), geração estática (SSG) e outras funcionalidades otimizadas para aplicações web modernas.

1.2. Criação do Projeto

Comando para criar o projeto:

npx create-next-app@15.1.6 donalds

Saída esperada:

Need to install the following packages:
create-next-app@15.1.6
Ok to proceed? (y) y

1.3. Configuração Interativa: Durante a configuração, serão feitas perguntas para personalizar o projeto. Veja o que cada pergunta significa:

Would you like to use TypeScript?
Escolha "Yes" para adicionar tipagem estática ao projeto, facilitando a manutenção e evitando erros.
Would you like to use ESLint?
"Yes" garante que seu código siga boas práticas e padrões de qualidade.
Would you like to use Tailwind CSS?
Permite utilizar um framework de estilização rápido e eficiente para construir interfaces responsivas.
Would you like your code inside a src/ directory?
Organiza os arquivos do projeto em um diretório específico, facilitando a estruturação.
Would you like to use App Router? (recommended)
Habilita o novo sistema de roteamento do Next.js, onde cada arquivo na pasta app vira uma rota automaticamente.
Would you like to use Turbopack for next dev?
"Yes" para otimizar o desempenho durante o desenvolvimento com uma ferramenta moderna de bundling.
Would you like to customize the import alias (@/* by default)?
Facilita as importações, permitindo usar atalhos ao invés de caminhos relativos longos.

1.4. Estrutura do Projeto

Após a criação, a estrutura do projeto ficará semelhante a:

donalds/
├── node_modules/
├── public/
├── src/
│   ├── app/          # Páginas do projeto (cada arquivo vira uma rota)
│   ├── components/   # Componentes reutilizáveis
│   ├── styles/       # Arquivos de estilização (CSS, etc.)
├── .eslintrc.json    # Configurações do ESLint
├── .gitignore        # Arquivos ignorados pelo Git
├── package.json      # Dependências e scripts
├── README.md         # Documentação do projeto
└── tsconfig.json     # Configurações do TypeScript (se habilitado)
1.5. Executando o Projeto
Após criar o projeto, siga estes passos:

Entre no diretório do projeto:
cd donalds

Instale as dependências (se necessário):
npm install

Inicie o servidor de desenvolvimento:
npm run dev

Acesse o projeto em:
http://localhost:3000


2. Configurando o Prisma

2.1. Introdução ao Prisma
O que é? Prisma é um ORM (Object Relational Mapping) moderno para Node.js e TypeScript que simplifica a interação com bancos de dados.

2.2. Instalação e Inicialização
Instale o Prisma e o client:
npm install prisma@6.2.1
npm install @prisma/client@6.2.1

Inicialize o Prisma: Isso criará um diretório prisma/ contendo o arquivo schema.prisma, onde a estrutura do banco de dados será definida.
npx prisma init

2.3. Definição dos Modelos (schema.prisma)
Os modelos abaixo representam as entidades do projeto:

Restaurant:
Representa um restaurante com informações como nome, imagens, categorias do cardápio, produtos e pedidos.



model Restaurant {
  id             String      @id @default(uuid())
  name           String
  slug           String
  descripton     String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
MenuCategory:

Define as categorias do menu do restaurante e se relaciona com produtos.



model MenuCategory {
  id           String      @id @default(uuid())
  name         String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  products     Product[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
Product:
Contém informações sobre os produtos do cardápio, como nome, descrição, preço, imagem e ingredientes.



model Product {
  id             String      @id @default(uuid())
  name           String
  descripton     String
  price          Float
  imageUrl       String
  ingredients    String
  restaurantId   String
  resturant      Restaurant  @relation(fields: [restaurantId], references: [id])
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId String
  orderProducts  OrderProduct[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
Order:
Registra um pedido realizado em um restaurante, com informações de total, status e método de consumo.



model Order {
  id                Int       @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  orderProducts     OrderProduct[]
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}
OrderProduct:
Tabela intermediária que vincula produtos aos pedidos, gerenciando quantidades e preços.



model OrderProduct {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
Enums:
Define os estados possíveis para pedidos e métodos de consumo.



enum OrderStatus {
  PENDING
  IN_PREPARATION
  CONFIRMED
  DELIVERED
  CANCELLED
  FINISHED
}

enum ConsumptionMethod {
  DELIVERY
  DINE_IN
}

2.4. Recursos Utilizados nas Relações

@relation: Define a relação entre tabelas, estabelecendo chaves estrangeiras (ex.: restaurantId em MenuCategory referencia o Restaurant).
@id @default(uuid()): Garante que cada registro tenha um identificador único, utilizando UUIDs para tabelas como Restaurant e Product.
@default(autoincrement()): Utilizado para gerar IDs sequenciais automaticamente, como no modelo Order.
@updatedAt: Atualiza automaticamente o campo sempre que o registro é modificado.
@default(now()): Define a data e hora de criação do registro como valor padrão.
onDelete: Cascade: (Não demonstrado no exemplo, mas comumente usado) Indica que, ao deletar um registro pai, todos os registros relacionados também serão removidos automaticamente.

2.5. Formatando e Migrando o Banco de Dados

Formate o schema:
npx prisma format

Configure o banco de dados: Crie um banco no NeonDB e copie a URL de conexão para o arquivo .env.

Aplique as migrações:
npx prisma migrate dev

2.6. Populando o Banco de Dados (Seeding)

Instale o ts-node:
npm install -D ts-node@10.9.2

Adicione o script de seed no package.json:

"prisma": {
  "seed": "ts-node ./prisma/seed.ts"
}

Execute a seed:
npx prisma db seed

3. Roteamento no Next.js com App Router
3.1. Funcionamento do App Router
Conceito: No Next.js, com o App Router, cada arquivo dentro da pasta app se transforma automaticamente em uma rota da aplicação, eliminando a necessidade de configurações manuais de roteamento.

3.2. Exemplo de Estrutura de Diretórios

src/
└── app/
    ├── page.tsx       // Rota: "/"
    ├── about/
    │   └── page.tsx   // Rota: "/about"
    └── contact/
        └── page.tsx   // Rota: "/contact"
3.3. Exemplo de Código de uma Página
Arquivo: about/page.tsx


export default function AboutPage() {
  return (
    <main>
      <h1>Sobre Nós</h1>
      <p>Bem-vindo à página sobre nosso projeto!</p>
    </main>
  );
}
Esta página será acessível via: http://localhost:3000/about

4. Integração com shadcn e Outras Ferramentas
4.1. Configuração do shadcn: O shadcn é uma biblioteca para componentes UI. Para inicializá-la, execute:

npx shadcn@2.3.0 init
Exemplo de saída:

Need to install the following packages:
shadcn@2.3.0
Ok to proceed? (y) y
✔ Preflight checks.
✔ Verifying framework. Found Next.js.
✔ Validating Tailwind CSS.
✔ Validating import alias.
...
Success! Project initialization completed.

Após a inicialização, você pode adicionar componentes. Por exemplo, para adicionar um input:
npx shadcn@2.3.0 add input

4.2. Configuração do ESLint com Simple Import Sort. Para manter o código organizado, instale o plugin:
npm install -D eslint-plugin-simple-import-sort@12.1.1

Exemplo de configuração (ESLint):

eslint.config.mjs

import { FlatCompat } from "@eslint/eslintrc";
import simpleImportSort from "eslint-plugin-simple-import-sort";
import { dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    plugins: {
      "simple-import-sort": simpleImportSort,
    },
    rules: {
      "simple-import-sort/imports": "error",
      "simple-import-sort/exports": "error",
    },
  },
];

export default eslintConfig;

Esta configuração garante que as importações sejam organizadas automaticamente, melhorando a legibilidade do código.

5. Configuração do Ambiente de Desenvolvimento
5.1. VSCode
Crie uma pasta .vscode com um arquivo settings.json para configurar correção automática com ESLint e salvar arquivos automaticamente:

json

{
  "eslint.workingDirectories": [
    {
      "mode": "auto"
    }
  ],
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  }
}
Essa configuração faz com que o ESLint valide e corrija os arquivos automaticamente ao salvar, garantindo um código consistente.

5.2. Prettier com TailwindCSS Plugin
Para padronizar a formatação das classes do Tailwind CSS, instale o Prettier e o plugin:
npm install -D prettier prettier-plugin-tailwindcss@0.6.5

Crie um arquivo .prettierrc.json com o seguinte conteúdo:

json

{
  "plugins": ["prettier-plugin-tailwindcss"]
}
Essa configuração faz com que o Prettier reorganize as classes do Tailwind de forma consistente, facilitando a manutenção do estilo.

Esta documentação organizada cobre desde a criação do projeto Next.js, a configuração do Prisma para o gerenciamento de banco de dados, até a integração com ferramentas modernas para formatação e qualidade de código. Cada tópico contém exemplos e explicações para auxiliar na compreensão e implementação das funcionalidades. 

