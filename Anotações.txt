Documentação: Criação de Projeto com Next.js e Prisma

Passo 1: Criando o Projeto com Next.js

O Next.js é um framework fullstack baseado em React que oferece renderização do lado do servidor (SSR), geração estática (SSG) e outras funcionalidades otimizadas para aplicações web modernas.

Para criar um novo projeto Next.js, execute o seguinte comando:

npx create-next-app@15.1.6 donalds

Saída esperada:

Need to install the following packages:
create-next-app@15.1.6
Ok to proceed? (y) y

Durante a configuração, será feita uma série de perguntas para personalizar o projeto:

Would you like to use TypeScript? → Recomendado escolher "Yes" para ter tipagem estática.
Would you like to use ESLint? → "Yes" para manter boas práticas de código.
Would you like to use Tailwind CSS? → "Yes" se desejar usar um framework de estilização rápido.
Would you like your code inside a src/ directory? → "Yes" para organizar melhor os arquivos do projeto.
Would you like to use App Router? (recommended) → "Yes", pois é o novo sistema de roteamento do Next.js.
Would you like to use Turbopack for next dev? → "Yes" para um desempenho otimizado durante o desenvolvimento.
Would you like to customize the import alias (@/* by default)? → "Yes" para facilitar importações.

Após responder as perguntas, o Next.js criará a estrutura do projeto dentro do diretório donalds.

Estrutura do Projeto

Após a instalação, o diretório conterá a seguinte estrutura:

donalds/
├── node_modules/
├── public/
├── src/
│   ├── app/  # Diretório de páginas com o novo App Router
│   ├── components/  # Componentes reutilizáveis
│   ├── styles/  # Estilização do projeto
├── .eslintrc.json  # Configuração do ESLint
├── .gitignore  # Arquivos ignorados pelo Git
├── package.json  # Dependências e scripts do projeto
├── README.md  # Documentação do projeto
└── tsconfig.json (se TypeScript for habilitado)

Executando o Projeto

Depois de criado, entre no diretório do projeto:

cd donalds

Instale as dependências caso necessário:

npm install

Inicie o servidor de desenvolvimento:

npm run dev

O Next.js iniciará um servidor local e o projeto poderá ser acessado em:

http://localhost:3000

Passo 2: Configurando Prisma

Prisma é um ORM moderno para Node.js e TypeScript, utilizado para interagir com bancos de dados de forma simples e eficiente.

Instalando Prisma

Execute os seguintes comandos para instalar o Prisma e o client:

npm install prisma@6.2.1
npm install @prisma/client@6.2.1

Inicialize o Prisma no projeto:

npx prisma init

Isso criará um diretório prisma/ com o arquivo schema.prisma, onde será definida a estrutura do banco de dados.

Definição dos Modelos no Prisma

Abaixo estão os modelos definidos no schema.prisma para o projeto:

model Restaurant {
  id        String      @id @default(uuid())
  name      String
  slug      String
  descripton    String
  avatarImageUrl      String
  coverImageUrl       String
  menuCategories MenuCategory[]
  products Product[]
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuCategory {
  id        String      @id @default(uuid())
  name      String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String      @id @default(uuid())
  name      String
  descripton    String
  price     Float
  imageUrl  String
  ingredients String
  restaurantId String
  resturant Restaurant @relation(fields: [restaurantId], references: [id])
  menuCategory MenuCategory @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId String
  orderProducts OrderProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int      @id @default(autoincrement())
  total     Float
  status     OrderStatus
  consumptionMethod ConsumptionMethod
  orderProducts OrderProduct[]
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id        String      @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  quantity Int
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  CONFIRMED
  DELIVERED
  CANCELLED
  FINISHED
}

enum ConsumptionMethod {
  DELIVERY
  DINE_IN
}
Explicação das Tabelas e Recursos Utilizados

Restaurant: Representa um restaurante, armazenando informações como nome, imagens, categorias do cardápio, produtos e pedidos.

MenuCategory: Define categorias dentro do menu de um restaurante, relacionando-se diretamente com produtos e restaurantes.

Product: Contém informações sobre um produto do cardápio, incluindo nome, descrição, preço, imagem e ingredientes.

Order: Registra um pedido feito em um restaurante, armazenando total do pedido, status e método de consumo.

OrderProduct: Tabela intermediária que vincula produtos a pedidos, permitindo a gestão de quantidades e preços.

Enums OrderStatus e ConsumptionMethod: Enumeram os possíveis estados de um pedido e os métodos de consumo.

Recursos Utilizados para Relações

@relation: Define chaves estrangeiras entre tabelas. Exemplo: restaurantId em MenuCategory referencia um Restaurant.

@id @default(uuid()): Define identificadores únicos para registros, usando UUIDs para tabelas como Restaurant e Product.

@default(autoincrement()): Utilizado para IDs automáticos em Order, garantindo valores sequenciais.

@updatedAt: Atualiza automaticamente o campo sempre que um registro é modificado.

@default(now()): Define valores padrão como a data e hora de criação do registro.

onDelete: Cascade: Deleta em cascada registro relacionados ao id relacionado, exemplo: tudo que for do restaurante X sera apagado nas demais tabelas referenciadas.

Formatando e Migrando o Banco de Dados

Formate o schema Prisma:

npx prisma format

Crie um banco no NeonDB e copie a URL de conexão para o arquivo .env do projeto.

Aplique as migrações para criar as tabelas no banco de dados:

npx prisma migrate dev

Populando o Banco de Dados (Seeding)

Instale o ts-node como dependência de desenvolvimento:

npm install -D ts-node@10.9.2

Adicione o script de seed no package.json:

"prisma": {
  "seed": "ts-node ./prisma/seed.ts"
}

Execute o comando para popular o banco:

npx prisma db seed

Agora o Prisma está configurado e pronto para uso no projeto.


📌 Roteamento no Next.js com App Router
No Next.js, ao utilizar o App Router, todos os arquivos dentro da pasta @app se tornam automaticamente rotas acessíveis na aplicação.

🛠️ Exemplo de Estrutura de Diretórios
plaintext
Copiar
Editar
src/
└── app/
    ├── page.tsx       # Rota: "/"
    ├── about/
    │   ├── page.tsx   # Rota: "/about"
    ├── contact/
    │   ├── page.tsx   # Rota: "/contact"
🖥️ Como Funciona?
Cada pasta dentro de app/ representa um segmento da URL.
Arquivos page.tsx definem páginas acessíveis via navegador.
O Next.js cuida automaticamente do roteamento sem necessidade de configurações extras.
✅ Exemplo de Código
Criando uma página "Sobre" (about/page.tsx):

tsx
Copiar
Editar
export default function AboutPage() {
  return (
    <main>
      <h1>Sobre Nós</h1>
      <p>Bem-vindo à página sobre nosso projeto!</p>
    </main>
  );
}
🔗 Acessível em: http://localhost:3000/about

Dessa forma, com o App Router, o roteamento se torna mais intuitivo e organizado. 🚀


npx shadcn@2.3.0 init
Need to install the following packages:
shadcn@2.3.0
Ok to proceed? (y) y

✔ Preflight checks.
✔ Verifying framework. Found Next.js.
✔ Validating Tailwind CSS.
✔ Validating import alias.
✔ Which style would you like to use? › Default
✔ Which color would you like to use as the base color? › Neutral
✔ Would you like to use CSS variables for theming? … no / yes
✔ Writing components.json.
✔ Checking registry.
✔ Updating tailwind.config.ts
✔ Updating src/app/globals.css
  Installing dependencies.

It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).

✔ How would you like to proceed? › Use --legacy-peer-deps
✔ Installing dependencies.
✔ Created 1 file:
  - src/lib/utils.ts

Success! Project initialization completed.
You may now add components.

matheus@matheus-note:~/Documentos/MatheusParticular/checkout/donalds$ 

